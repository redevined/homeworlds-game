// Generated by CoffeeScript 1.9.3

/*
Example json

{
	"systems": [
		{
			"pos": [50, 10],
			"stars": [
				{
					"color": "red",
					"size": 2
				},
				{
					"color": "yellow",
					"size": 1
				}
			],
			"ships_p1": [
				{
					"color": "green",
					"size": 3
				}
			],
			"ships_p2": [
			]
		},
		{
			"pos": [50, 90],
			"stars": [
				{
					"color": "blue",
					"size": 1
				},
				{
					"color": "green",
					"size": 3
				}
			],
			"ships_p1": [
			],
			"ships_p2": [
				{
					"color": "yellow",
					"size": 3
				}
			]
		}
	],
	"players": [
		{
			"id": 1,
			"name": "Alpha",
			"actions": 1
		},
		{
			"id": 2,
			"name": "Beta",
			"actions": 0
		}
	]
}
 */
var Element, System,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Element = (function() {
  function Element(e) {
    this.e = $(e);
  }

  Element.prototype.destroy = function() {
    return this.e.remove();
  };

  Element.prototype.render = function(surface) {
    return surface.append(this.e);
  };

  return Element;

})();

System = (function(superClass) {
  extend(System, superClass);

  function System(pos, stars1, ships_p1, ships_p2) {
    this.pos = pos;
    this.stars = stars1;
    this.ships = {
      1: ships_p1,
      2: ships_p2
    };
    System.__super__.constructor.call(this, "<div class=\"system-clear\">\n	<div class=\"system\" style=\"top: " + this.pos[1] + "; left: " + this.pos[0] + ";\">\n		<div class=\"ships_p2\">\n			<!-- Player 2 ships -->\n		</div>\n		<div class=\"stars\">\n			<!-- Stars -->\n		</div>\n		<div class=\"ships_p1\">\n			<!-- Player 1 ships -->\n		</div>\n	</div>\n</div>");
  }

  System.prototype.destroy = function() {
    var i, j, k, len, len1, len2, ref, ref1, ref2, ship, star;
    ref = this.stars;
    for (i = 0, len = ref.length; i < len; i++) {
      star = ref[i];
      star.destroy();
    }
    ref1 = this.ships[1];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      ship = ref1[j];
      ship.destroy();
    }
    ref2 = this.ships[2];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      ship = ref2[k];
      ship.destroy();
    }
    return System.__super__.destroy.call(this);
  };

  System.prototype.render = function(surface) {
    var i, j, k, len, len1, len2, ref, ref1, ref2, ship, star;
    ref = this.stars;
    for (i = 0, len = ref.length; i < len; i++) {
      star = ref[i];
      star.render(this.e.find(".stars"));
    }
    ref1 = this.ships[1];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      ship = ref1[j];
      ship.render(this.e.find(".ships_p1"));
    }
    ref2 = this.ships[2];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      ship = ref2[k];
      ship.render(this.e.find(".ships_p2"));
    }
    return System.__super__.render.call(this, surface);
  };

  System.prototype.addShip = function(player, ship) {
    return this.ships[player.id] << ship;
  };

  System.prototype.removeShip = function(player, ship) {
    var index;
    index = this.ships[player.id].indexOf(ship);
    if (index !== -1) {
      this.ships[player.id].splice(index, 1).destroy();
    }
    if (!ships[1] && !ships[2]) {
      return this.destroy();
    }
  };

  System.prototype.removeStar = function(star) {
    var index;
    index = this.stars.indexOf(ship);
    if (index !== -1) {
      this.stars.splice(index, 1).destroy();
    }
    if (!stars) {
      return this.destroy();
    }
  };

  return System;

})(Element);
